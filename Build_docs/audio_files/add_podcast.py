#!/usr/bin/env python3
#
# By Le Chen and Chatgpt
# chenle02@gmail.com / le.chen@auburn.edu
# Created at Wed 16 Apr 2025 09:14:54 PM CDT
#

import os
import re
from pathlib import Path


def convert_wav_to_rst_name(wav_filename):
    # Remove .wav extension
    base_name = wav_filename[:-4]
    # Replace _ with .
    base_name = base_name.replace('_', '.')
    # Replace -99- (or any number) with :99:
    base_name = re.sub(r'-(\d+)-', r':\1:', base_name)
    return f"{base_name}.rst"


def check_and_add_audio(rst_file_path, wav_filename):
    with open(rst_file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # Abort if audio already present
    if 'audio controls' in content:
        print(f"Audio already exists in {rst_file_path}")
        return False

    # Match BibTeX code block followed by "`Back to"
    pattern = (
        r'(\*\*BibTeX Entry:\*\*\s*\n'                     # Match "**BibTeX Entry:**"
        r'\s*\.\. code-block:: bibtex\s*\n'                # Match code block line
        r'(?:\n(?:\s{3,}.*\n)*?)'                          # Match BibTeX lines (indented)
        r'\s{3,}\}\s*\n'                                   # Match the closing brace
        r'(?:\s*`The URL link to the source <.*?>`__\s*\n)?'  # OPTIONAL URL link line
        r')(?=\s*`Back to)'                                # Lookahead for "`Back to index"
    )
    bibtex_match = re.search(pattern, content, re.MULTILINE)

    if not bibtex_match:
        print(f"Could not find BibTeX entry in {rst_file_path}")
        return False

    # Audio HTML block
    audio_html = f'''

.. raw:: html

   <div style="margin-top: 1em; margin-bottom: 1em;">
     <audio controls>
       <source src="../{wav_filename}" type="audio/wav">
       <p>Your browser does not support the audio element. Please download the audio file instead.</p>
     </audio>
   </div>

----

`Download audio <../{wav_filename}>`__ (The podcast is generated by Le Chen using NotebookLM powered by Google Gemini.)

'''

    # Split content where audio should be inserted
    bibtex_end = bibtex_match.end()
    before = content[:bibtex_end]
    after = content[bibtex_end:]

    # Remove any existing footnote definitions [#f1]
    after = re.sub(r'\n?\.\. \[#f1\][^\n]*(?:\n(?!\.\.).*)*', '', after, flags=re.DOTALL)

    # Combine updated content
    new_content = before + audio_html + after.rstrip() + '\n'

    with open(rst_file_path, 'w', encoding='utf-8') as f:
        f.write(new_content)

    print(f"âœ… Added audio to {rst_file_path}")
    return True


def main():
    # Current directory (where WAV files are)
    current_dir = Path('.')
    rst_dir = Path('../bib_entries')

    # Ensure rst_dir exists
    if not rst_dir.exists():
        print(f"RST directory {rst_dir} does not exist!")
        return

    # Process all WAV files
    wav_files = list(current_dir.glob('*.wav'))
    print(f"Found {len(wav_files)} WAV files")

    for wav_path in wav_files:
        wav_filename = wav_path.name
        rst_filename = convert_wav_to_rst_name(wav_filename)
        rst_path = rst_dir / rst_filename

        if not rst_path.exists():
            print(f"RST file not found: {rst_path}")
            continue

        check_and_add_audio(rst_path, wav_filename)


if __name__ == "__main__":
    main()
