#!/usr/bin/env python3
#
# By Le Chen and Chatgpt
# chenle02@gmail.com / le.chen@auburn.edu
# Created at Wed 16 Apr 2025 09:14:54 PM CDT
#

import os
import re
from pathlib import Path


def convert_wav_to_rst_name(wav_filename):
    # Remove .wav extension
    base_name = wav_filename[:-4]
    # Convert back to citation format: underscore to dot, hyphen to colon
    rst_name = base_name.replace('_', '.').replace('-', ':')
    return f"{rst_name}.rst"


def check_and_add_audio(rst_file_path, wav_filename):
    with open(rst_file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # Check if audio player is already present
    if 'audio controls' in content:
        print(f"Audio already exists in {rst_file_path}")
        return False

    # Find the BibTeX entry position
    bibtex_match = re.search(r'(\*\*BibTeX Entry:\*\*\s*\n\s*\.\. code-block:: bibtex\s*\n\s*.*?})\s*\n\s*(?=`Back to)', content, re.DOTALL)

    if not bibtex_match:
        print(f"Could not find BibTeX entry in {rst_file_path}")
        return False

    # Audio HTML to insert
    audio_html = f'''

.. raw:: html

   <audio controls>
     <source src="../audio_files/{wav_filename}" type="audio/wav">
     Your browser does not support the audio element.
   </audio>

`Download audio <../audio_files/{wav_filename}>`_ [#f1]_

'''

    footnote = '''
.. [#f1] The podcast is generated by Le Chen using NotebookLM powered by Google Gemini.

'''

    # Split content at the end of BibTeX entry
    bibtex_end = bibtex_match.end()
    before = content[:bibtex_end]
    after = content[bibtex_end:]

    # Remove any existing footnote if present
    after = re.sub(r'\.\. \[#f1\].*?\n\n', '', after, flags=re.DOTALL)

    # Combine the parts with new audio section
    new_content = before + audio_html + after.rstrip() + footnote

    # Write back to file
    with open(rst_file_path, 'w', encoding='utf-8') as f:
        f.write(new_content)

    print(f"Added audio to {rst_file_path}")
    return True


def main():
    # Current directory (where WAV files are)
    current_dir = Path('.')
    rst_dir = Path('../bib_entries')

    # Ensure rst_dir exists
    if not rst_dir.exists():
        print(f"RST directory {rst_dir} does not exist!")
        return

    # Process all WAV files
    wav_files = list(current_dir.glob('*.wav'))
    print(f"Found {len(wav_files)} WAV files")

    for wav_path in wav_files:
        wav_filename = wav_path.name
        rst_filename = convert_wav_to_rst_name(wav_filename)
        rst_path = rst_dir / rst_filename

        if not rst_path.exists():
            print(f"RST file not found: {rst_path}")
            continue

        check_and_add_audio(rst_path, wav_filename)


if __name__ == "__main__":
    main()
